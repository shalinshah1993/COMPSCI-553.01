%%


%term EOF 
	| ID of string
	| INT of int | STRING of string 
	| COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
	| LBRACE | RBRACE | DOT 
	| PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE | UMINUS
	| AND | OR | ASSIGN
	| ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
	| BREAK | NIL
	| FUNCTION | VAR | TYPE 

%nonterm  program
		| exp
		| lValue
		| arithmeticExp
		| compExp
		| boolExp
		| noValExp
		| expSeq
		| funcCall
		| paraList

%name ItIsOurOwnParserBitch
%pos int
%verbose

%start program
%eop EOF
%noshift EOF

(* Reserved keyword for the Tiger language *)
%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE DO OF NIL
(* Used to insert in Tiger *)
%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

(* Precedence in the reverse order *)
%nonassoc ASSIGN
%left AND OR
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%%

program	: 
			exp					()

exp : 	
		NIL						()
	|	INT 					()
	|	STRING 					()
	|	lValue					()
	|	arithmeticExp			()
	|	compExp					()
	|	boolExp					()
	|	noValExp				()
	|	LPAREN expSeq RPAREN 	()
	|	funcCall				()

lValue :
			ID							()
		|	lValue DOT ID				()
		|	lValue LBRACE exp RBRACK	()

arithmeticExp :	
				exp TIMES exp 			()
			|	exp DIVIDE exp 			()
			|	exp PLUS exp 			()
			|	exp MINUS exp 			()
			|	MINUS exp %prec UMINUS 	()

compExp :
			exp EQ exp 				()
		|	exp NEQ exp 			()
		| 	exp GT exp 				()
		|	exp GE exp 				()
		|	exp LT exp 				()
		| 	exp LE exp 				()

boolExp :
			exp AND exp 			()
		|	exp OR exp 				()

noValExp :
			LPAREN RPAREN			()

expSeq :
			exp 					()
		|	expSeq SEMICOLON exp 	()

funcCall :
			ID LPAREN paraList RPAREN	()

paraList :
										()
		|	exp 						()
		|	paraList COMMA exp 			()

