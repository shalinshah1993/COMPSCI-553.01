%%


%term	EOF 
		| ID of string
		| INT of int | STRING of string 
		| COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
		| LBRACE | RBRACE | DOT 
		| PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE | UMINUS
		| AND | OR | ASSIGN
		| ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
		| BREAK | NIL
		| FUNCTION | VAR | TYPE 

%nonterm	exp 
		| program
		| dec
		| tyDec
		| ty
		| arrTy
		| recTy
		| fieldDec
		| funDec
		| varDec
		| lValue
		| subscript
		| fieldExp
		| exp
		| segExp
		| negation
		| callExp
		| infixExp
		| arrCreate
		| recCreate
		| fieldCreate
		| assignment
		| ifThenElse
		| ifThen
		| whileExp
		| forExp
		| letExp


%name ItIsOurOwnParserBitch
%pos int
%verbose

%start program
%eop EOF
%noshift EOF

(* Reserved keyword for the Tiger language *)
%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE DO OF NIL
(* Used to insert in Tiger *)
%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

(* Precedence in the reverse order *)
%nonassoc EQ NEQ
%left PLUS MINUS
%left TIMES
%right EXP
%left UMINUS


%%


program	: exp				()

exp : 	INT 				()
	|	VAR 				()
	|	exp TIMES exp 			(EXP1 * EXP2)
	|	exp DIVIDE exp 			(EXP1 div EXP2)
	|	exp PLUS exp 			(EXP1 + EXP2)
	|	exp MINUS exp 			(EXP1 - EXP2)
	|	exp EQ exp 				()
	|	exp NEQ exp 			()
	| 	exp GT exp 				()
	|	exp GE exp 				()
	|	exp LT exp 				()
	| 	exp LE exp 				()
	|	(exp) 				()

(*dec: tyDec					()
	| varDec				()
	| funDec				()
	
tyDec: 						()
	| ty
	
ty: ID						()
	| arrTy					()
	| recTy					()
	
arrTy: ARRAY				()

recTy: fieldDec				()

fieldDec: ID				()

funDec: exp					()*)
	(* There's a second type of funDec of type tyId *)
	
(*varDec: ID					()*)
	(* There's a second type of varDec of type tyId *)
	
(*lValue: ID					()
		| subscript			()
		| fieldExp			()
		
subscript: lValue			()

fieldExp: lValue			()

exp: 						()
	| lValue				()
	| NIL					()
	| INT					()
	| STRING
	| seqExp				()
	| negation				()
	| callExp				()
	| infixExp				()
	| arrCreate				()
	| recCreate				()
	| assignment			()
	| ifThenElse			()
	| ifThen				()
	| whileExp				()
	| forExp				()
	| letExp				()*)