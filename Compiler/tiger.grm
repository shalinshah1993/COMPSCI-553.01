%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  
	exp 
	| program
	| dec
	| tyDec
	| ty
	| arrTy
	| recTy
	| fieldDec
	| funDec
	| varDec
	| lValue
	| subscript
	| fieldExp
	| exp
	| segExp
	| negation
	| callExp
	| infixExp
	| arrCreate
	| recCreate
	| fieldCreate
	| assignment
	| ifThenElse
	| ifThen
	| whileExp
	| forExp
	| letExp

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

(* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar. 
 *)

program	: exp				()

dec: tyDec					()
	| varDec				()
	| funDec				()
	
tyDec: 						()
	| ty
	
ty: ID						()
	| arrTy					()
	| recTy					()
	
arrTy: ARRAY				()

recTy: fieldDec				()

fieldDec: ID				()

funDec: exp					()
	(* There's a second type of funDec of type tyId *)
	
varDec: ID					()
	(* There's a second type of varDec of type tyId *)
	
lValue: ID					()
		| subscript			()
		| fieldExp			()
		
subscript: lValue			()

fieldExp: lValue			()

exp: 						()
	| lValue				()
	| NIL					()
	| INT					()
	| STRING
	| seqExp				()
	| negation				()
	| callExp				()
	| infixExp				()
	| arrCreate				()
	| recCreate				()
	| assignment			()
	| ifThenElse			()
	| ifThen				()
	| whileExp				()
	| forExp				()
	| letExp				()