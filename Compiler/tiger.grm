structure A = Absyn
open Symbol
%%
%term EOF 
	| ID of string
	| INT of int | STRING of string 
	| COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
	| LBRACE | RBRACE | DOT 
	| PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE | UMINUS
	| AND | OR | ASSIGN
	| ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
	| BREAK | NIL
	| FUNCTION | VAR | TYPE 

%nonterm  program of A.exp 				(* DONE *)
		| exp of A.exp 					(* DONE *)
		| lValue of A.var 				(* DONE *)
		| notID of A.var
		| arithmeticExp of A.exp 		(* DONE *)
		| compExp of A.exp 				(* DONE *)
		| boolExp of A.exp 				(* DONE *)
		| noValExp of A.exp 			(* DONE *)
		| condExp of A.exp 				(* DONE *)
		| expSeq of (A.exp * pos) list	(* DONE  EDIT from SeqExp*)
		| funcCall of A.exp				(* DONE  EDIT from CallExp*)
		| paraList of A.exp list		(* DONE *)
		| decs of A.dec list			(* DONE *)
		| dec of A.dec 					(* DONE *)
		| typeDec of {name: Symbol.symbol, ty: A.ty, pos: pos}	(* DONE EDIT from TypeDec*)
		| typeDecList of A.dec list		(* DONE EDIT TypeDec list*)
		| ty of A.ty 					(* DONE *)
		| tyField of {name: symbol, escape: bool ref, typ: symbol, pos: pos} 			(* DONE *)
		| tyFields of {name: symbol, escape: bool ref, typ: symbol, pos: pos} list 		(* DONE *)
		| varDec of A.dec 				(* DONE EDIT from VarDec*)
		| funcDec of A.fundec 			(* DONE *)
		| funcDecList of A.dec			(* EDIT from FunctionDec *)
		| createArray of A.exp			(* DONE EDIT from ArrayExp*)
		| createRecord of A.exp 		(* DONE EDIT from REcordExp*)
		| recordList of (A.symbol * A.exp * int) list 			(* DONE EDIT from RecordTy*)
		| recordField of (A.symbol * A.exp * int)		(* DONE *)

%name Shah_Lynch_Parser
%pos int
%verbose

%start program
%eop EOF
%noshift EOF

(* Reserved keyword for the Tiger language *)
%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE DO OF NIL
(* Used to insert in Tiger *)
%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

(* Precedence in the reverse order *)
%nonassoc ASSIGN THEN OF DO
%right ELSE
%left AND OR
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%%

program	: 
			exp							(exp)		

(* CFG for declaring an expression *)
exp : 	
		NIL								(A.NilExp)
	|	INT 							(A.IntExp INT)
	|	STRING 							(A.StringExp(STRING, STRINGleft))
	|	BREAK							(A.BreakExp(BREAKleft))
	|	lValue							(A.VarExp(lValue))
	|	arithmeticExp					(arithmeticExp)
	|	compExp							(compExp)
	|	boolExp							(boolExp)
	|	noValExp						(noValExp)
	|	condExp							(condExp)
	|	funcCall						(funcCall)
	|	LET decs IN expSeq END 			(A.LetExp {decs=decs, body=A.SeqExp(expSeq), pos=LETleft})
	|	LPAREN expSeq RPAREN 			(A.SeqExp(expSeq))
	|	createArray						(createArray)
	|	createRecord					(createRecord)
	|	lValue ASSIGN exp 				(A.AssignExp {var=lValue, exp=exp, pos=lValueleft})



lValue :
		ID								(A.SimpleVar(symbol ID, IDleft))
	|	notID 							(notID)

notID :
		lValue DOT ID						(A.FieldVar(lValue, (symbol ID), lValueleft))
	|	ID LBRACK exp RBRACK				(A.SubscriptVar(A.SimpleVar(symbol ID, IDleft), exp, IDleft))
	|	notID LBRACK exp RBRACK				(A.SubscriptVar(notID, exp, notIDleft))
		

(* CFG for different exp evaluation *)
arithmeticExp :	
		exp TIMES exp 					(A.OpExp {left=exp1, oper=A.TimesOp, right=exp2, pos=exp1left})
	|	exp DIVIDE exp 					(A.OpExp {left=exp1, oper=A.DivideOp, right=exp2, pos=exp1left})
	|	exp PLUS exp 					(A.OpExp {left=exp1, oper=A.PlusOp, right=exp2, pos=exp1left})
	|	exp MINUS exp 					(A.OpExp {left=exp1, oper=A.MinusOp, right=exp2, pos=exp1left})
	|	MINUS exp %prec UMINUS 			(A.OpExp ({left = A.IntExp(0), oper = A.MinusOp, right = exp, pos = MINUSleft}))

compExp :
		exp EQ exp 						(A.OpExp {left=exp1, oper=A.EqOp, right=exp2, pos=exp1left})
	|	exp NEQ exp 					(A.OpExp {left=exp1, oper=A.NeqOp, right=exp2, pos=exp1left})
	| 	exp GT exp 						(A.OpExp {left=exp1, oper=A.GtOp, right=exp2, pos=exp1left})
	|	exp GE exp 						(A.OpExp {left=exp1, oper=A.GeOp, right=exp2, pos=exp1left})
	|	exp LT exp 						(A.OpExp {left=exp1, oper=A.LtOp, right=exp2, pos=exp1left})
	| 	exp LE exp 						(A.OpExp {left=exp1, oper=A.LeOp, right=exp2, pos=exp1left})

boolExp :
		exp AND exp 					(A.IfExp {test=exp1, then'=exp2, else'=SOME(A.IntExp(0)), pos=exp1left})
	|	exp OR exp 						(A.IfExp {test=exp1, then'=A.IntExp(1), else'=SOME(exp2), pos=exp1left})
		
condExp :
		IF exp THEN exp ELSE exp        (A.IfExp {test=exp1, then'=exp2, else'=SOME(exp3), pos=IFleft})
	| 	IF exp THEN exp                 (A.IfExp {test=exp1, then'=exp2, else'=NONE, pos=IFleft})
	| 	WHILE exp DO exp                (A.WhileExp {test=exp1, body=exp2, pos=WHILEleft})
	|	FOR ID ASSIGN exp TO exp DO exp (A.ForExp {var=symbol ID, escape= ref true, lo=exp1, hi=exp2, body=exp3, pos=FORleft})
		

noValExp :
		LPAREN RPAREN					(A.NilExp)

expSeq :
		exp 				 			([(exp, expleft)])
	|	expSeq SEMICOLON exp 			(expSeq @ [(exp, expleft)])

(* CFG to call a function and it's parameter list *)
funcCall :
		ID LPAREN paraList RPAREN		(A.CallExp{func=symbol ID, args=paraList, pos=IDleft})

paraList :
										([])
	|	exp 							([exp])
	|	paraList COMMA exp 				(paraList @ [exp])

(* CFG for declaring data type *)
decs :
										([])
	|	decs dec 						(decs @ [dec])

dec :
		typeDec							(A.TypeDec [(typeDec)])
	|	varDec 							(varDec)
	|	funcDec							(A.FunctionDec [(funcDec)])

(* typeDecList : 
			typeDec 					([typeDec])
		|	typeDecList typeDec 		(typeDecList @ [typeDec]) *)
typeDec :  
		TYPE ID EQ ty 					({name=symbol ID, ty=ty, pos=TYPEleft})

ty : 
		ID                        		(A.NameTy (symbol ID, IDleft))
  	| 	LBRACE tyFields RBRACE    		(A.RecordTy tyFields)
  	| 	ARRAY OF ID               		(A.ArrayTy (symbol ID, ARRAYleft))

(* CFG for list of types associated with an ID: Used as funPar and defining list data type *)
tyFields :
										([])
    |	tyField 						([tyField])
	|	tyFields COMMA tyField 			(tyFields @ [tyField])

tyField : 
		ID COLON ID          			({name=symbol ID1, escape=ref true, typ=symbol ID2, pos=ID1left})

(* CFG for decalaring a variables *)
varDec : 
		VAR ID ASSIGN exp               (A.VarDec {name=symbol ID, escape= ref true, typ=NONE, init=exp, pos=VARleft})
	|	VAR ID COLON ID ASSIGN exp      (A.VarDec {name=symbol ID1, escape= ref true, typ=SOME (symbol ID2, ID2left), init=exp, pos=VARleft})

(* CFG for declaring a function *)
(* funcDecList : 
				funcDec                              ([funcDec])
			|	funcDecList funcDec                  (funcDecList @ [funcDec]) *)

funcDec : 
		FUNCTION ID LPAREN tyFields RPAREN EQ exp       	({name=symbol ID, params=tyFields, result=NONE, body=exp, pos=FUNCTIONleft})
	|	FUNCTION ID LPAREN tyFields RPAREN COLON ID EQ exp  ({name=symbol ID1, params=tyFields, result=SOME (symbol ID2, ID2left), body=exp, pos=FUNCTIONleft})

(* CFG for array creation *)
createArray : 
				ID LBRACK exp RBRACK OF exp        (A.ArrayExp {typ=symbol ID, size=exp1, init=exp2, pos=IDleft})

(* CFG for record creation *)
createRecord : 
				ID LBRACE recordList RBRACE      (A.RecordExp {fields=recordList, typ=symbol ID, pos=IDleft})

recordList :    
                        							    ([])
  					|	recordField                     ([recordField])
  					|	recordList COMMA recordField    (recordList @ [recordField])

recordField :
				ID EQ exp         ((symbol ID, exp, IDleft))